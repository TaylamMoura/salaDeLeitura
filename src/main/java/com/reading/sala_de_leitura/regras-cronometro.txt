As regras de controle de sess√£o s√£o diretrizes ou medidas implementadas para garantir que as sess√µes de uso em uma aplica√ß√£o operem de maneira apropriada e segura. Vamos detalhar algumas das regras comuns que voc√™ pode considerar ao desenvolver a funcionalidade de sess√µes de leitura na sua aplica√ß√£o:

### Regras Comuns de Controle de Sess√£o:

1. **Sess√£o √önica por Usu√°rio**:
   - **Prevenir M√∫ltiplas Sess√µes**: Assegurar que um
   usu√°rio n√£o possa iniciar v√°rias sess√µes de leitura simultaneamente.

   - **Exemplo**: Antes de iniciar uma nova sess√£o,
   verificar se alguma sess√£o atual do usu√°rio est√° ativa.

2. **Limite de Dura√ß√£o de Sess√£o**:
   - **Definir um Tempo M√°ximo**: Impor um tempo m√°ximo para cada
   sess√£o de leitura.
   - **Exemplo**: Uma sess√£o de leitura n√£o deve exceder 2 horas.

4. **Persist√™ncia e Recupera√ß√£o de Sess√£o**:
   - **Salvar Progresso**: Salvar o estado da sess√£o de leitura para
    que o usu√°rio possa continuar de onde parou.
   - **Exemplo**: Armazenar o tempo restante e o livro em leitura
   para recupera√ß√£o posterior.


### Implementa√ß√£o de Regras de Sess√£o no Backend:

#### Verificar Sess√£o Ativa:

```java
public boolean hasActiveSession(User user) {
    // Verifique se h√° uma sess√£o ativa no banco de dados para o usu√°rio
    return sessionRepository.findActiveSessionByUser(user.getId()) != null;
}
```

#### Limite de Dura√ß√£o de Sess√£o:

```java
public boolean isSessionDurationValid(LocalDateTime startTime, LocalDateTime endTime) {
    Duration duration = Duration.between(startTime, endTime);
    return duration.toHours() <= 2;
}
```

#### Encerrar Sess√£o Inativa:

```java
@Scheduled(fixedRate = 600000) // Verifica a cada 10 minutos
public void checkInactiveSessions() {
    List<Session> inactiveSessions = sessionRepository.findInactiveSessions();
    for (Session session : inactiveSessions) {
        session.setActive(false);
        sessionRepository.save(session);
    }
}
```

#### Salvando Progresso de Sess√£o:

```java
public void saveSessionProgress(Session session) {
    sessionRepository.save(session);
}
```

### Persist√™ncia e Recupera√ß√£o de Sess√£o:

Armazenar as informa√ß√µes necess√°rias para retomar a sess√£o de leitura permite ao usu√°rio continuar de onde parou.

#### Modelo de Sess√£o:

```java
@Entity
public class Session {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    private User user;

    private Long bookId;
    private LocalDateTime startTime;
    private LocalDateTime endTime;
    private boolean isActive;
    private int timeLeft; // em segundos

    // Getters e Setters
}
```

Com essas regras e implementa√ß√µes, sua aplica√ß√£o ficar√° mais robusta e segura, proporcionando uma boa experi√™ncia de usu√°rio ao gerenciar sess√µes de leitura.

Se tiver outras d√∫vidas ou precisar de mais ajuda, estarei por aqui! üöÄüìö‚ú®